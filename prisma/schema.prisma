generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount", "jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id              String           @id @default(uuid())
  key             String           @unique
  name            String
  description     String
  logoUrl         String
  website         String
  socials         Socials          @relation(fields: [socialsId], references: [id])
  projects        Project[]
  projectRequests ProjectRequest[]
  tags            Tag[]
  socialsId       String
  subscriptions   Subscription[]
}

model Project {
  id                 String               @id @default(uuid())
  game               Game                 @relation(fields: [gameId], references: [id])
  key                String               @unique
  name               String
  abstract           String
  description        String?
  donationAddress    String?
  logoUrl            String?
  website            String
  socials            Socials              @relation(fields: [socialsId], references: [id])
  posts              ProjectPost[]
  projectAuthorships ProjectAuthorships[]
  tags               Tag[]
  gameId             String
  socialsId          String
  published          Boolean              @default(false)
  initialPublishDone Boolean              @default(true)
  lastUpdate         DateTime?
  favoritedBy        User[]
  subscriptions      Subscription[]
}

model ProjectPost {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  projectId   String
  title       String
  abstract    String
  body        String
  publishedAt DateTime @default(now())
  editedAt    DateTime @default(now())
}

enum UserRole {
  USER
  ADMIN
}

model EmailVerificationCode {
  id         String   @id @default(uuid())
  validUntil DateTime
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
}

model User {
  id                    String                 @id @default(uuid())
  address               String                 @unique
  email                 String?
  emailVerified         Boolean                @default(false)
  receiveEmails         Boolean                @default(false)
  name                  String?
  bio                   String?
  joinedAt              DateTime
  role                  UserRole               @default(USER)
  socials               Socials                @relation(fields: [socialsId], references: [id])
  posts                 ProjectPost[]
  projectAuthorships    ProjectAuthorships[]
  projectRequests       ProjectRequest[]
  socialsId             String
  favoritedProjects     Project[]
  subscriptions         Subscription[]
  EmailVerificationCode EmailVerificationCode?
}

enum ProjectAuthorRole {
  ADMIN
  AUTHOR
}

model ProjectAuthorships {
  user      User              @relation(fields: [userId], references: [id])
  project   Project           @relation(fields: [projectId], references: [id])
  type      ProjectAuthorRole
  userId    String
  projectId String

  @@id([userId, projectId])
}

model Tag {
  id       String    @id @default(uuid())
  key      String    @unique
  name     String
  game     Game?     @relation(fields: [gameId], references: [id])
  gameId   String?
  projects Project[]
}

model Socials {
  id      String    @id @default(uuid())
  website String?
  twitter String?
  github  String?
  discord String?
  Game    Game[]
  Project Project[]
  User    User[]
}

model ProjectRequest {
  id              String   @id @default(uuid())
  projectName     String
  projectAbstract String
  projectWebsite  String
  requestedAt     DateTime @default(now())
  rejected        Boolean  @default(false)
  user            User     @relation(fields: [userId], references: [id])
  game            Game     @relation(fields: [gameId], references: [id])
  userId          String
  gameId          String
}

enum SubscriptionType {
  PUSH_NOTIFICATION
  EMAIL
}

model Subscription {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  game      Game?              @relation(fields: [gameId], references: [id])
  gameId    String?
  project   Project?           @relation(fields: [projectId], references: [id])
  projectId String?
  type      SubscriptionType[]
}
